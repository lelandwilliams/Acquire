
mainWidget.py
	class AcquireUI
		addPlayers(self, players)
		changeGroupColor(self,corp)
		changeTileColor(self,tile,company)
		chooseNewCorp(self,player,tile)
		chooseTile(self, player)
		setColors(self)
		test(self)
		setPlayers()
	play()
	dialogTest()

acquire.py
	class Player(self, name, PlayerType, corps)
		self.name
		self.playerType
		self.playerSubtype
		self.hand
		self.lastPlacement
		self.money
		self.stock
		self.stockAcquired

	class Corp(self, name, tilegroupindex, model)
		self.game
		self.name
		self.shares_available
		self.share_price
		self.active
		self.anchor_tile
		self.groupIndex

		__repr__(self)
		isActive(self)
		setInitialPrice(self)
		selfActive(self, b)
		size(self)
		price(self)


	class Game(self)
		self.tiles
		self.tilegroups
		self.players
		self.corporations

		__init__(self,players)
		addGrouptoGroup(self,oldgroup,newgroup)
		addTiletoCorp(self,tile,corp)
		addTiletoGroup(self,tile,group)
		adjoiningGroups(self,tile)
		advanceCurrentPlayer(self)
		aiChooseCorp(self, corps)
		aiChooseTile(self, player)
		corpSize(self, corp)
		determineStartingPlayer(self,array,starter,index)
		evaluatePlay(self,tile)
		fillHands(self)
		gameOver(self)
		inactiveCorps(self)
		initiate_corps(self)
		initiate_tiles(self)
		isAdjoining(self,tile,group)
		placeStarter(self,tile)
		playerBoughtStock(self,player,stock)
		primaryHolders(self, corp)
		secondaryHolders(self, corp)
		setActive(self, corp, player, tile)
		setStarters(self):
	play()

controller.py
	class Controller
		__init__(self)
		liquidate(self)
		pickCorp(self,player,tile)
		pickMerger(self, corps)
		pickStock(self)
		playTile(self)
		newGame(self)
		resolveMerger(tile)
		rewardPrimaries(self,corp)
		setup(self)

board.py
	class Board(self,colors)
	changeTileColor(self,tile,company)

playerboxgroup.py
	class PlayerBoxGroup(self)
		addPlayer(self,name,money)
		test(self)
		updatePlayerMoney(self,name)

playerbox.py
	class PlayerBox(self)
		setName(self, name)

playerDialogBox.py
	class PlayerDialogBox(self)
		chooseStock(self,companies,colors)
		chooseTile(self,tiles)
